class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int i,j;
        i=0;
        j=nums.size()-1;
        vector<int> ans;
        while(i<=j){
            if( abs(nums[i]) > abs(nums[j]) ){
                ans.push_back(nums[i]*nums[i]);
                i++;
            }
            else{
                ans.push_back(nums[j]*nums[j]);
                j--;
            }
        }
        for(i=0,j=nums.size()-1/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        int sum;
        // ans=0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            sum=0;
            int n=q.size();
            while(n!=0){
                TreeNode* temp=q.front();
                sum=sum+temp->val;
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }
                n--;
                q.pop();
            }
        }
        return sum;
    }
};;i<j;i++){
            swap(ans[i],ans[j]);
            j--;
        }
        return ans;
    }
};
