class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
       
        vector<vector<int>>newGrid(n,vector<int>(n,0));
        queue<pair<int,int>>q;

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    newGrid[i][j]=2;
                    q.push({i,j});
                }
                else{
                    newGrid[i][j]=0;
                }
            }
        }
        if(q.size()==0 || q.size()==n*n){
            return -1;
        }
        int count=0;
        vector<int> a1={-1,0,1,0};  // top,right,bottom,left
        vector<int> a2={0,1,0,-1};
        while(!q.empty()){
            // int t1=q.front().first;
            // int t2=q.front().second;
            int size=q.size();

            while(size){
                    
                    int t1=q.front().first;
                    int t2=q.front().second;
                    if((t1+a1[0])>=0){  // top
                        if(newGrid[t1+a1[0]][t2]==0){
                          q.push({t1+a1[0],t2});
                          newGrid[t1+a1[0]][t2]=2;
                        }
                    }
                    if((t2+a2[1])<n){   // right
                        if(newGrid[t1][t2+a2[1]]==0){
                          q.push({t1,t2+a2[1]});
                          newGrid[t1][t2+a2[1]]=2;
                        }
                    }
                    if((t1+a1[2])<n){   // bottom
                        if(newGrid[t1+a1[2]][t2]==0){
                          q.push({t1+a1[2],t2});
                          newGrid[t1+a1[2]][t2]=2;
                        }
                    }
                    if((t2+a2[3])>=0){  //left
                        if(newGrid[t1][t2+a2[3]]==0){
                          q.push({t1,t2+a2[3]});
                          newGrid[t1][t2+a2[3]]=2;
                        }
                    }
                    q.pop();
                    size--;
            }
            count++;
            
        }
        return count-1;
    }
};
