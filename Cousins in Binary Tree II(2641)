/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        vector<int> levelSum;
        while(!q.empty()){
            int n=q.size();
            int sum=0;
            while(n--){
                TreeNode* temp=q.front();
                q.pop();
                sum+=temp->val;
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }
            levelSum.push_back(sum);
        }
        int i=1;
        root->val=0;
        q.push(root);

        while(!q.empty()){
            int n=q.size();
            while(n--){
                int sum=0;
                TreeNode* temp=q.front();
                q.pop(); 
                if(temp->left){
                   q.push(temp->left);
                   sum+=temp->left->val;
                }
                if(temp->right){
                   q.push(temp->right);
                   sum+=temp->right->val;
                }
                if(temp->left){
                  temp->left->val=levelSum[i]-sum;
                }
                if(temp->right){
                  temp->right->val=levelSum[i]-sum;
                }

            }
            i++;
        }
        return root;
    }
};
